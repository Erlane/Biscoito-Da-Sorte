{"version":3,"sources":["assets/biscoito.jpg","assets/whats.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","Container","styled","div","SubContainer","Title","h1","SubContainerPhrases","Image","img","Paragraph","p","Button","button","App","state","phrases","text","handlePhrase","mensage","randon","Math","floor","random","length","setState","handleShare","sharePhrase","window","open","src","BicoitoDaSorte","alt","this","onClick","Whats","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,wzECK3C,IAAMC,EAAYC,IAAOC,IAAV,KAaTC,EAAeF,IAAOC,IAAV,KAmBZE,EAAQH,IAAOI,GAAV,KAOLC,EAAsBL,IAAOC,IAAV,KAInBK,EAAQN,IAAOO,IAAV,KAQLC,EAAYR,IAAOS,EAAV,KAwCTC,EAASV,IAAOW,OAAV,KA6EGC,E,4MAlDbC,MAAQ,CACNC,QAAS,CACT,qEACA,oDACA,+BACA,wGACA,0EACA,iDACA,yEACA,yDACA,2DACA,yDACA,yCAEAC,KAAM,I,EAGRC,aAAe,WACb,IAAIC,EAAU,EAAKJ,MAAME,KAErBG,EAASC,KAAKC,MAAMD,KAAKE,SAAW,EAAKR,MAAMC,QAAQQ,QAE3DL,EAAU,EAAKJ,MAAMC,QAAQI,GAE7B,EAAKK,SAAS,CACbR,KAAME,K,EAITO,YAAc,WACV,IAAMC,EAAc,EAAKZ,MAAME,KAC/BW,OAAOC,KAAP,6CAAkDF,K,uDAItD,OACE,kBAAC1B,EAAD,KACE,kBAACG,EAAD,KACE,kBAACC,EAAD,gCACA,kBAACE,EAAD,KACE,kBAACC,EAAD,CAAOsB,IAAKC,IAAgBC,IAAI,aAChC,kBAACtB,EAAD,KAAYuB,KAAKlB,MAAME,OAEzB,kBAACL,EAAD,CAAQsB,QAASD,KAAKf,cAAtB,iBACA,kBAACN,EAAD,CAAQsB,QAASD,KAAKP,aAAa,yBAAKI,IAAKK,IAAOH,IAAI,sBAAxD,sB,GA7CUI,aC9GEC,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.847d16b8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/biscoito.b4fdb467.jpg\";","module.exports = __webpack_public_path__ + \"static/media/whats.953a8c3e.png\";","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport BicoitoDaSorte from './assets/biscoito.jpg';\nimport Whats from './assets/whats.png';\n\nconst Container = styled.div`\n  width: 100%;\n  height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: black;\n\n  @media(max-width: 425px){\n    background-color: #FFFFFF;\n  }\n`;\n\nconst SubContainer = styled.div`\n  width: 40%;\n  background-color: #FFF;\n  border-radius: 5px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  padding: 1rem 2rem;\n\n  @media(max-width: 768px){\n    width: 70%;\n  }\n  @media(max-width: 425px){\n    width: 100%;\n    padding: 0;\n  }\n`;\n\nconst Title = styled.h1`\n  color: red;\n  font-size: 2.2rem;\n  font-family: 'Dancing Script', cursive;\n  margin: 0 0 2rem;\n`;\n\nconst SubContainerPhrases = styled.div`\n  position: relative;\n`;\n\nconst Image = styled.img`\n  width: 25vw;\n\n  @media(max-width: 425px){\n    width: 80vw;\n  }\n`;\n\nconst Paragraph = styled.p`\n  width: 19vw;\n  height: 8.3vh;\n  background: #FFFFFF;\n  color: #B59619;\n  font-size: 1rem;\n  font-weight: bold;\n  font-style: italic;\n  top: 55px;\n  left: 168px;\n  transform: rotate(-10deg);\n  position: absolute;\n  z-index: 1;\n\n  @media(max-width: 768px){\n    width: 33vw;\n    top: 24px;\n    left: 100px;\n  }\n\n  @media(max-width: 648px){\n    top: 18px;\n    left: 85px;\n  }\n\n  @media (max-width: 425px){\n    width: 50vw;\n    height: 9.3vh;\n    top: 70px;\n    left: 153px;\n  }\n\n  @media (max-width: 375px){\n    width: 50vw;\n    height: 11vh;\n    top: 55px;\n    left: 153px;\n  }\n`;\n\nconst Button = styled.button`\n  width: 70%;\n  background-color: red;\n  border: none;\n  border-radius: 25px;\n  font-size: 0.9rem;\n  font-weight: bold;\n  padding: 1rem 1rem;\n  margin-top: 2rem;\n  outline: none;\n  cursor: pointer;\n\n  img {\n    width: 20px;\n    margin-right: 3%;\n  }\n\n  :hover {\n    font-size: 1rem;\n  }\n\n  @media(max-width: 425px){\n    width: 80%;\n  }\n`;\n\nclass App extends Component {\n  state = {\n    phrases: [\n    'Todas as coisas são difíceis antes de se tornarem fáceis.',\n    'Deixe de lado as preocupações e seja feliz.',\n    'Nós somos o que pensamos.',\n    'Nada é por acaso… Acredite em seus sonhos e nos seus potenciais… Na vida tudo se supera.',\n    'Realize o óbvio, pense no improvável e conquiste o impossível.',\n    'Você sempre será a sua melhor companhia!',\n    'São os nossos amigos que nos ensinam as mais valiosas lições.',\n    'Surpreender e ser surpreendido é o segredo do amor.',\n    'Quem olha para fora sonha; quem olha para dentro acorda.',\n    'O amor está mais próximo do que você imagina.',\n    'Você é do tamanho do seu sonho.',\n    ],\n    text: '',\n  }\n\n  handlePhrase = () => {\n    let mensage = this.state.text;\n\n    let randon = Math.floor(Math.random() * this.state.phrases.length);\n\n    mensage = this.state.phrases[randon];\n\n    this.setState({\n     text: mensage,\n    });\n  }\n\n  handleShare = () => {\n      const sharePhrase = this.state.text;\n      window.open(`https://web.whatsapp.com/send?text=${sharePhrase}`)\n    }\n\nrender() {\n  return (\n    <Container>\n      <SubContainer>\n        <Title>Biscoito da sorte ! =) </Title>\n        <SubContainerPhrases>\n          <Image src={BicoitoDaSorte} alt='biscoito'/>\n          <Paragraph>{this.state.text}</Paragraph>\n        </SubContainerPhrases>\n        <Button onClick={this.handlePhrase}>Sortear frase</Button>\n        <Button onClick={this.handleShare}><img src={Whats} alt='Icone do WhatsApp'/>Compartilhar</Button>\n      </SubContainer>\n    </Container>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}